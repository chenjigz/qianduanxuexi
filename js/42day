<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title></title>
</head>

<body>
    <!-- 餐厅类
    属性：金钱，座位数量、职员列表
    方法：招聘职员，解雇职员
    职员类
    属性：ID，姓名，工资
    方法：完成一次工作
    服务员类，继承自职员
    完成一次工作：如果参数是个数组，则记录客人点菜，如果参数不是数组则是上菜行为
    厨师类，继承自职员
    完成一次工作：烹饪出菜品
    顾客类
    方法：点菜，吃
    菜品类
    属性：名字、烹饪成本、价格 -->

    <!-- var ifeRestaurant = new Restaurant({
        cash: 1000000,
        seats: 20,
        staff: []
    });
    
    var newCook = new Cook("Tony", 10000);
    ifeRestaurant.hire(newCook);
    
    console.log(ifeRestaurant.staff);
    
    ifeRestaurant.fire(newCook);
    console.log(ifeRestaurant.staff); -->

    <script>

        // 餐厅类 params={cash:number,seats:number,staff:array} 
        function Restaurant(params) {
            this.cash = params.cash;
            this.seats = params.seats;
            this.staff = params.staff;
        }
        // 招聘职员
        Restaurant.prototype.hire = function (staff) {
            this.staff.push(staff);
        }
        // 解雇职员
        Restaurant.prototype.fire = function (staff) {
            var index = this.staff.indexOf(staff);
            this.staff.splice(index, 1);
        }

        // 职员ID
        var staffid = 0;
        // 职员类 params = (name,salary)
        function Staff(name, salary) {
            this.name = name;
            this.salary = salary;
            this.staffid = ++staffid;
        }
        // 完成一次工作
        Staff.prototype.dojob = function () {
            console.log('完成一次工作');
        }

        // 服务员类
        function Waiter(name, salary, job) {
            Staff.call(this, name, salary);
            this.job = job;
        }
        // 服务员工作
        Waiter.prototype.doJob = function () {
            if (this.job instanceof Array)
                Customer.order();
            else
                console.log("上菜");
        }

        function Cook(name, salary) {
            Staff.call(this, name, salary);
        }
        Cook.prototype.doJob = function (dishName) {
            console.log('完成一次工作：' + '烹饪出' + dishName);
        }
        // 顾客类
        function Customer() {
        }
        Customer.prototype.order = function () {
            console.log('点菜');
        }
        Customer.prototype.eat = function () {
            console.log('就餐');
        }
        // 菜品列表
        var dishList = [];
        // 菜品类  params:name：菜名，cost:成本，price:价格;
        function Dishs(name, cost, price) {
            this.name = name;
            this.cost = cost;
            this.price = price;
            // 将自己push入dishList；
            dishList.push(this);
        }
        var ifeRestaurant = new Restaurant({
            cash: 1000000,
            seats: 20,
            staff: []
        });

        var newCook1 = new Cook("Tony", 10000);
        var newCook2 = new Cook("Ton", 11000);
        ifeRestaurant.hire(newCook1);
        ifeRestaurant.hire(newCook2);

        console.log(ifeRestaurant.staff);

        ifeRestaurant.fire(newCook1);
        console.log(ifeRestaurant.staff);

    </script>


</body>

</html>
